{
  "Python": {
    "prefix": "py",
    "body": ["#!/usr/bin/env python", "#-*- coding:utf-8 -*-", "", "$1"],
    "description": "python解释器"
  },
  "doc": {
    "prefix": "doc str",
    "body": ["\"\"\"${1:document String}\"\"\""],
    "description": "文档字符串"
  },
  "@wraps": {
    "prefix": "@wraps",
    "body": ["@wraps($1)"],
    "description": "装饰器"
  },
  "@classmethod": {
    "prefix": "@classmethod",
    "body": ["@classmethod"],
    "description": "类方法, classmethod 修饰符对应的函数不需要实例化，不需要 self 参数"
  },
  "@staticmethod": {
    "prefix": "@staticmethod",
    "body": ["@staticmethod"],
    "description": "staticmethod 返回函数的静态方法"
  },
  "import": {
    "prefix": "im",
    "body": ["import ${1:name}", "$0"],
    "description": ""
  },
  "from import": {
    "prefix": "fi",
    "body": ["from ${1:name} import ${1:name}", "$0"],
    "description": ""
  },
  "print": {
    "prefix": "p",
    "body": ["print($1)"],
    "description": ""
  },
  "print/format": {
    "prefix": "pf",
    "body": ["print(\"${1:{0}}\".format(${2:str}))"],
    "description": ""
  },
  "pprint": {
    "prefix": "pp",
    "body": ["pprint.pprint($1)"],
    "description": ""
  },
  "return": {
    "prefix": "return",
    "body": ["return ${1:value}"],
    "description": ""
  },
  "assert": {
    "prefix": "assert",
    "body": ["assert ${1:value}"],
    "description": ""
  },
  "raise": {
    "prefix": "raise",
    "body": ["raise ${1:value}"],
    "description": ""
  },
  "int": {
    "prefix": "int",
    "body": ["int(${1:str})"],
    "description": ""
  },
  "long": {
    "prefix": "long",
    "body": ["login(${1:str}, base=10)"],
    "description": ""
  },
  "float": {
    "prefix": "float",
    "body": ["float($1)"],
    "description": ""
  },
  "str": {
    "prefix": "str",
    "body": ["str($1)"],
    "description": ""
  },
  "round": {
    "prefix": "round",
    "body": ["round($1,$0)"],
    "description": ""
  },
  "isinstance ": {
    "prefix": "isinstance",
    "body": ["isinstance(${1:value},${0:data_type)"],
    "description": "判断一个对象是否是一个已知的类型"
  },
  "repr": {
    "prefix": "repr",
    "body": ["repr($1)"],
    "description": ""
  },
  "eval": {
    "prefix": "eval",
    "body": ["eval($1)"],
    "description": ""
  },
  "tuple": {
    "prefix": "tuple",
    "body": ["tuple($1)"],
    "description": ""
  },
  "list": {
    "prefix": "list",
    "body": ["list($1)"],
    "description": ""
  },
  "set": {
    "prefix": "set",
    "body": ["set($1)"],
    "description": ""
  },
  "dict": {
    "prefix": "dict",
    "body": ["dict($1)"],
    "description": ""
  },
  "frozenset": {
    "prefix": "frozenset",
    "body": ["frozenset($1)"]
  },
  "chr": {
    "prefix": "chr",
    "body": ["chr($1)"]
  },
  "unichr": {
    "prefix": "unichr",
    "body": ["unichr($1)"]
  },
  "ord": {
    "prefix": "ord",
    "body": ["ord($1)"]
  },
  "hex": {
    "prefix": "hex",
    "body": ["hex($1)"]
  },
  "oct": {
    "prefix": "oct",
    "body": ["oct($1)"]
  },
  "format": {
    "prefix": "format",
    "body": ["format($1)"],
    "triggerAssist": false
  },
  "join": {
    "prefix": "join",
    "body": ["'$1'.join($0)"]
  },
  "replace": {
    "prefix": "replace",
    "body": ["${1:str}.replace(\"${2:str1}\",\"${3:str2}\")"]
  },
  "len": {
    "prefix": "len",
    "body": ["len($1)"],
    "description": ""
  },
  "max": {
    "prefix": "max",
    "body": ["max($1)"],
    "description": ""
  },
  "min": {
    "prefix": "min",
    "body": ["min($1)"],
    "description": ""
  },
  "lower": {
    "prefix": "lower",
    "body": ["lower()"],
    "description": "字符串转为小写"
  },
  "sum": {
    "prefix": "sum",
    "body": ["sum($1)"],
    "description": ""
  },
  "reversed": {
    "prefix": "reversed",
    "body": ["reversed($1)"],
    "description": ""
  },
  "del": {
    "prefix": "del",
    "body": ["del"],
    "description": ""
  },
  "count": {
    "prefix": "count",
    "body": ["count($1)"],
    "description": ""
  },
  "type": {
    "prefix": "type",
    "body": ["type($1)"],
    "description": ""
  },
  "super": {
    "prefix": "super()",
    "body": ["super()"],
    "description": ""
  },
  "xrange": {
    "prefix": "xrange()",
    "body": ["xrange($1)"],
    "description": ""
  },
  "range": {
    "prefix": "range()",
    "body": ["range($1)"],
    "description": ""
  },
  "sorted": {
    "prefix": "sorted()",
    "body": ["sorted($1)"],
    "description": ""
  },
  "reduce": {
    "prefix": "reduce()",
    "body": ["reduce(${1:function},${2:iterable})"],
    "description": ""
  },
  "zip": {
    "prefix": "zip",
    "body": ["zip($1,$2)"],
    "description": ""
  },
  "list derivation": {
    "prefix": "list derivation",
    "body": ["${1:list_name} = [ i for i in ${2:list_name} ]"],
    "description": "列表推导式"
  },
  "list derivation if": {
    "prefix": "list derivation if",
    "body": ["${1:list_name} = [ i for i in ${2:list_name} if ${3:String} in i ]"],
    "description": "列表推导式，包含if条件"
  },
  "dict.clear()": {
    "prefix": "dict.clear()",
    "body": ["${1:dict}.clear()"],
    "description": ""
  },
  "dict.copy()": {
    "prefix": "dict.copy()",
    "body": ["${1:dict}.copy()"],
    "description": ""
  },
  "dict.fromkeys()": {
    "prefix": "dict.fromkeys()",
    "body": ["dict.fromkeys(${1:dictname})"],
    "description": ""
  },
  "dict.get()": {
    "prefix": "dict.get()",
    "body": ["${1:dict}..get(${1:value})"],
    "description": ""
  },
  "dict.has_key()": {
    "prefix": "dict.has_key()",
    "body": ["${1:dict}.has_key(${2:value})"],
    "description": ""
  },
  "dict.items()": {
    "prefix": "dict.items()",
    "body": ["${1:dict}.items()"],
    "description": ""
  },
  "dict.setdefault()": {
    "prefix": "dict.setdefault()",
    "body": ["${1:dict}.setdefault($2,$0)"],
    "description": ""
  },
  "dict.update()": {
    "prefix": "dict.update()",
    "body": ["${1:dict}.update(${2:dict2})"],
    "description": ""
  },
  "dict.values()": {
    "prefix": "dict.values()",
    "body": ["${1:dict}.values()"],
    "description": ""
  },
  "dict.pop()": {
    "prefix": "dict.pop()",
    "body": ["${1:dict}.pop(${2:value})"],
    "description": ""
  },
  "dict.popitem()": {
    "prefix": "dict.popitem()",
    "body": ["${1:dict}.popitem()"],
    "description": ""
  },
  "enumerate": {
    "prefix": "for in enumerate",
    "body": ["for idx, val in enumerate(${1:data}, 1):", "\t${0:print(idx,val)}"],
    "description": ""
  },
  "map": {
    "prefix": "map()",
    "body": ["map(${1:function}, ${2:iterable})"],
    "description": ""
  },
  "for in": {
    "prefix": "for",
    "body": ["for ${1:target_list} in ${2:expression_list}:", "\t${0:pass}"],
    "description": "for语句"
  },
  "for else": {
    "prefix": "for else",
    "body": ["for ${1:target_list} in ${2:expression_list}:", "\t${3:pass}", "else:", "\t${0:pass}"],
    "description": "for else语句"
  },
  "yield": {
    "prefix": "yield",
    "body": ["yield"],
    "description": ""
  },
  "while": {
    "prefix": "while",
    "body": ["while ${1:condition}:", "\t${0:pass}"],
    "description": "while循环"
  },
  "break": {
    "prefix": "break",
    "body": ["break"],
    "description": "break 语句，和 C 中的类似，用于跳出最近的 for 或 while 循环."
  },
  "continue": {
    "prefix": "continue",
    "body": ["continue"],
    "description": "表示继续循环中的下一次迭代"
  },
  "if": {
    "prefix": "if",
    "body": ["if ${1:expression}:", "\t${2:pass}"],
    "description": "if条件判断"
  },
  "if/else": {
    "prefix": "ife",
    "body": ["if ${1:condition}", "\t${2:pass}", "else:", "\t${0:pass}"],
    "description": "if else语句"
  },
  "if/elif/else": {
    "prefix": "ifee",
    "body": ["if ${1:condition}", "\t${2:pass}", "elif ${3:condition}:", "\t${4:pass}", "else:", "\t${0:pass}"],
    "description": "if elif else语句"
  },
  "if in": {
    "prefix": "ifi",
    "body": ["if ${1:String} in ${2:String}:", "\t${2:pass}"],
    "description": "if in语句"
  },
  "if not": {
    "prefix": "ifn",
    "body": ["if not ${1:String}:", "\t${0:pass}"],
    "description": "if not "
  },
  "if not in": {
    "prefix": "ifni",
    "body": ["if ${1:String} not in ${2:String}:", "\t${2:pass}"],
    "description": "if not in"
  },
  "def function": {
    "prefix": "def",
    "body": ["def ${1:funcname}($2):", "\t\"\"\"${2: Documentation Strings}\"\"\"", "\t${0:pass}"],
    "description": "def函数"
  },
  "def function class": {
    "prefix": "def (class method)",
    "body": ["def ${1:funcname}(self):", "\t\"\"\"${2: Documentation Strings}\"\"\"", "\t${0:pass}"],
    "description": "def函数，用于class内使用"
  },
  "def args kwargs": {
    "prefix": "def function(*args, **kwargs)",
    "body": ["def ${1:funcname}(*args, **kwargs):", "\t\"\"\"${2: Documentation Strings}\"\"\"", "\t${0:pass}"],
    "description": ""
  },
  "__init__()": {
    "prefix": "__init__()",
    "body": ["def __init__(self,$1):", "\t${0:pass}"],
    "description": ""
  },
  "__set__()": {
    "prefix": "__set__()",
    "body": ["def __set__(self,$1):", "\t${0:pass}"],
    "description": ""
  },
  "__delete__()": {
    "prefix": "__delete__()",
    "body": ["def __delete__(self,$1):", "\t${0:pass}"],
    "description": ""
  },
  "__new__()": {
    "prefix": "__new__()",
    "body": ["def __new__(self,$1):", "\t${0:pass}"],
    "description": ""
  },
  "__call__()": {
    "prefix": "__call__()",
    "body": ["def __call__(self,$1):", "\t${0:pass}"],
    "description": ""
  },
  "__get__()": {
    "prefix": "__get__()",
    "body": ["def __get__(self,$1):", "\t${0:pass}"],
    "description": ""
  },
  "def decorator": {
    "prefix": "def decorator",
    "body": ["def ${1:funcname}(${2:argv}):", "\tdef ${3:funcname}():", "\t\t${4:pass}", "\treturn ${0:funcname}"],
    "description": "装饰器"
  },
  "lambda": {
    "prefix": "lambda",
    "body": ["lambda ${1:parameter_list}: ${2:expression}"],
    "description": "用于创建匿名函数"
  },
  "class": {
    "prefix": "cls",
    "body": ["class ${1:classname}:", "\t\"\"\"${2: Documentation Strings}\"\"\"", "\t", "\tdef __init__(self):",
      "\t\t${3:pass}", "\t", "\tdef ${4:funcname}(self):", "\t\t${0:pass}"
    ],
    "description": ""
  },
  "try/except": {
    "prefix": "te",
    "body": ["try:", "\t${1:pass}", "except Exception as e:", "\t${2:pass}"],
    "description": ""
  },
  "try/except/else": {
    "prefix": "tee",
    "body": ["try:", "\t${1:pass}", "except Exception as e:", "\t${2:pass}", "else:", "\t${0:pass}"],
    "description": ""
  },
  "try/except/else/finally": {
    "prefix": "teef",
    "body": ["try:", "\t${1:pass}", "except Exception as e:", "\t${2:pass}", "else:", "\t${3:pass}", "finally:",
      "\t${0:pass}"
    ],
    "description": ""
  },
  "try/finally": {
    "prefix": "tf",
    "body": ["try:", "\t${1:pass}", "finally:", "\t${2:pass}"],
    "description": ""
  },
  "try/except/finally": {
    "prefix": "tef",
    "body": ["try:", "\t${1:pass}", "except Exception as e:", "\t${2:pass}", "finally:", "\t${0:pass}"],
    "description": ""
  },
  "file/read": {
    "prefix": "fd",
    "body": ["with open(${1:filename},\"r\",encoding=\"utf-8\") as f:", "\t${0:data}=f.read()"],
    "description": "使用with方式读取文件"
  },
  "file/write": {
    "prefix": "fw",
    "body": ["with open(${1:filename},\"w\") as f:", "\tf.write(${0})"],
    "description": "使用with方式写入文件"
  },
  "json": {
    "prefix": "json",
    "body": ["json"],
    "description": "json库"
  },
  "json/dumps": {
    "prefix": "json/dumps",
    "body": ["json.dumps(${1:data},indent=${2:4},encoding=\"${3:utf-8}\")"],
    "description": "将 obj 序列化为 JSON 格式的 str"
  },
  "json/loads": {
    "prefix": "json/loads",
    "body": ["json.loads($0)"],
    "description": "将 (一个包含 JSON 文档的 str, bytes 或 bytearray 实例) 反序列化为 Python 对象"
  },
  "os": {
    "prefix": "os",
    "body": ["os"],
    "description": ""
  },
  "os.listdir": {
    "prefix": "os.listdir",
    "body": ["os.listdir(${1:dirname})"],
    "description": "用于返回指定的文件夹包含的文件或文件夹的名字的列表"
  },
  "os.walk": {
    "prefix": "os.walk",
    "body": ["os.walk(${1:dirname})"],
    "description": "生成目录树中的文件名，方式是按上->下或下->上顺序浏览目录树。对于以 top 为根的目录树中的每个目录（包括 top 本身），它都会生成一个三元组 (dirpath, dirnames, filenames)"
  },
  "os.getcwd": {
    "prefix": "os.getcwd",
    "body": ["os.getcwd()"],
    "description": ""
  },
  "os.chdir": {
    "prefix": "os.chdir",
    "body": ["os.chdir(${1:dirname})"],
    "description": "切换工作目录"
  },
  "os.mkdir": {
    "prefix": "os.mkdir",
    "body": ["os.mkdir(${1:dirname})"],
    "description": "创建目录；如果目录已存在，则抛出 FileExistsError 异常"
  },
  "os.makedirs": {
    "prefix": "os.makedirs",
    "body": ["os.makedirs(${1:dirname})"],
    "description": "递归目录创建函数"
  },
  "os.removedirs": {
    "prefix": "os.removedirs",
    "body": ["os.removedirs(${1:dirname})"],
    "description": "递归删除目录"
  },
  "os.rmdir": {
    "prefix": "os.rmdir",
    "body": ["os.rmdir(${1:dirname})"],
    "description": "移除（删除）目录 path。如果目录不存在或不为空，则会分别抛出 FileNotFoundError 或 OSError 异常。"
  },
  "os.remove": {
    "prefix": "os.remove",
    "body": ["os.remove(${1:filename})"],
    "description": "移除（删除）文件 path"
  },
  "os.stat": {
    "prefix": "os.stat",
    "body": ["os.stat(${1:file})"],
    "description": "获取文件/目录信息"
  },
  "os.path.getsize": {
    "prefix": "os.path.getsize",
    "body": ["os.path.getsize(${1:path})"],
    "description": "获取文件大小"
  },
  "os.path.islink": {
    "prefix": "os.path.islink",
    "body": ["os.path.islink(${1:path})"],
    "description": "判断路径是否为链接"
  },
  "os.path.ismount": {
    "prefix": "os.path.ismount",
    "body": ["os.path.ismount(${1:path})"],
    "description": "判断路径是否为挂载点"
  },
  "os.path.splitext": {
    "prefix": "os.path.splitext",
    "body": ["os.path.splitext(${1:path})"],
    "description": "分割路径，返回路径名和文件扩展名的元组"
  },
  "os.path.split": {
    "prefix": "os.path.split",
    "body": ["os.path.split(${1:path})"],
    "description": ""
  },
  "os.path.abspath": {
    "prefix": "os.path.abspath",
    "body": ["os.path.abspath(${1:path})"],
    "description": "返回路径 path 的绝对路径"
  },
  "os.path.dirname": {
    "prefix": "os.path.dirname",
    "body": ["os.path.dirname(${1:path})"],
    "description": "返回路径 path 的目录名称"
  },
  "os.path.basename": {
    "prefix": "os.path.basename",
    "body": ["os.path.basename(${1:path})"],
    "description": "返回路径 path 的基本名称"
  },
  "os.path.exists": {
    "prefix": "os.path.exists",
    "body": ["os.path.exists(${1:path})"],
    "description": "判断目录是否存在"
  },
  "os.path.isabs": {
    "prefix": "os.path.isabs",
    "body": ["os.path.isabs(${1:path})"],
    "description": "如果 path 是一个绝对路径，则返回 True"
  },
  "os.path.isfile": {
    "prefix": "os.path.isfile",
    "body": ["os.path.isfile(${1:path})"],
    "description": "判断路径是否是一个文件"
  },
  "os.path.isdir": {
    "prefix": "os.path.isdir",
    "body": ["os.path.isdir(${1:path})"],
    "description": "判断路径是否是一个目录"
  },
  "os.path.join": {
    "prefix": "os.path.join",
    "body": ["os.path.join(${1:path1},${2:path2})"],
    "description": "路径拼接"
  },
  "os.path.getctime": {
    "prefix": "os.path.getctime",
    "body": ["os.path.getctime(${1:path})"],
    "description": "获取文件创建时间"
  },
  "os.path.getatime": {
    "prefix": "os.path.getatime",
    "body": ["os.path.getatime(${1:path})"],
    "description": "文件或者目录的最后存取时间"
  },
  "os.path.getmtime": {
    "prefix": "os.path.getmtime",
    "body": ["os.path.getmtime(${1:path})"],
    "description": "文件或者目录的最后修改时间"
  },
  "os.ctermid": {
    "prefix": "os.ctermid",
    "body": ["os.ctermid(${1:pid})"],
    "description": "返回与进程控制终端对应的文件名"
  },
  "os.environ": {
    "prefix": "os.environ",
    "body": ["os.environ"],
    "description": ""
  },
  "os.getenv": {
    "prefix": "os.getenv",
    "body": ["os.getenv(${1:key})"],
    "description": "如果存在，返回环境变量 key 的值，否则返回 default"
  },
  "os.lstat": {
    "prefix": "os.lstat",
    "body": ["os.lstat(${1:path})"],
    "description": ""
  },
  "os.system": {
    "prefix": "os.system",
    "body": ["os.system(${1:cmd})"],
    "description": ""
  },
  "os.popen": {
    "prefix": "os.popen",
    "body": ["os.popen(${1:cmd})"],
    "description": ""
  },
  "os.sep": {
    "prefix": "os.sep",
    "body": ["os.sep($1)"],
    "description": "返回路径分隔符"
  },
  "os.getlogin": {
    "prefix": "os.getlogin",
    "body": ["os.getlogin()"],
    "description": "返回当前系统的登录用户名,适用于unix"
  },
  "os.kill": {
    "prefix": "os.kill",
    "body": ["os.kill($1)"],
    "description": "结束进程"
  },
  "sys": {
    "prefix": "sys",
    "body": ["sys"],
    "description": ""
  },
  "sys.path": {
    "prefix": "sys.path",
    "body": ["sys.path"],
    "description": ""
  },
  "sys.stderr": {
    "prefix": "sys.stderr",
    "body": ["sys.stderr"],
    "description": ""
  },
  "sys.stdout": {
    "prefix": "sys.stdout",
    "body": ["sys.stdout"],
    "description": ""
  },
  "sys.stdin": {
    "prefix": "sys.stdin",
    "body": ["sys.stdin"],
    "description": ""
  },
  "sys.argv": {
    "prefix": "sys.argv",
    "body": ["sys.argv"],
    "description": "获取运行 Python 程序的命令行参数"
  },
  "sys.exit()": {
    "prefix": "sys.exit()",
    "body": ["sys.exit()"],
    "description": "通过引发 SystemExit 异常来退出程序，默认为0"
  },
  "sys.platform": {
    "prefix": "sys.platform",
    "body": ["sys.platform"],
    "description": "当前正在运行的平台名称"
  },
  "sys.version": {
    "prefix": "sys.version",
    "body": ["sys.version"],
    "description": "返回当前 Python 解释器的版本信息"
  },
  "re": {
    "prefix": "re",
    "body": ["re"],
    "description": "正则表达式操作"
  },
  "re.compile": {
    "prefix": "re.compile",
    "body": ["re.compile(${1:str})"],
    "description": "该函数用于将正则表达式字符串编译成 _sre.SRE_Pattern 对象"
  },
  "re.search": {
    "prefix": "re.search",
    "body": ["re.search(${1:str1},${2:str2})"],
    "description": "扫描整个字符串，并返回字符串中第一处匹配 pattern 的匹配对象"
  },
  "re.findall": {
    "prefix": "re.findall",
    "body": ["re.findall(${1:pattern},${2:string},flags=0)"],
    "description": "扫描整个字符串，并返回字符串中所有匹配 pattern 的子串组成的列表。其中 pattern 参数代表正则表达式；string 代表被匹配的宇符串；flags 则代表正则表达式的匹配旗标。"
  },
  "re.finditer": {
    "prefix": "re.finditer",
    "body": ["re.finditer(${1:pattern},${2:string},flags=0)"],
    "description": ""
  },
  "re.fullmatch": {
    "prefix": "re.fullmatch",
    "body": ["re.fullmatch(${1:pattern},${2:string},flags=0)"],
    "description": ""
  },
  "re.sub": {
    "prefix": "re.sub",
    "body": ["re.sub($1)"],
    "description": ""
  },
  "re.split": {
    "prefix": "re.split",
    "body": ["re.split($1,$2)"],
    "description": "用 pattern 分开 string。 re.split(pattern, string, maxsplit=0, flags=0)"
  },
  "time": {
    "prefix": "time",
    "body": ["time"],
    "description": "该模块提供了各种时间相关的函数"
  },
  "datetime": {
    "prefix": "datetime",
    "body": ["datetime"],
    "description": "datetime 模块提供用于处理日期和时间的类"
  },
  "time Y-m-d": {
    "prefix": "time Y-m-d",
    "body": ["time.strftime(\"%Y-%m-%d\", time.localtime())"],
    "description": "返回 %Y-%m-%d 格式"
  },
  "time H:M:S": {
    "prefix": "time H:M:S",
    "body": ["time.strftime(\"%H:%M:%S\", time.localtime())"],
    "description": "返回 %H:%M:%S 格式"
  },
  "time Y-m-d H:M:S": {
    "prefix": "time Y-m-d H:M:S",
    "body": ["time.strftime(\"%Y-%m-%d %H:%M:%S\", time.localtime())"],
    "description": "返回%Y-%m-%d %H:%M:%S格式"
  },
  "time.time": {
    "prefix": "time.time()",
    "body": ["time.time()"],
    "description": ""
  },
  "time.localtime": {
    "prefix": "time.localtime",
    "body": ["time.localtime($1)"],
    "description": ""
  },
  "time.clock": {
    "prefix": "time.clock",
    "body": ["time.clock($1)"],
    "description": ""
  },
  "time.mktime": {
    "prefix": "time.mktime",
    "body": ["time.mktime($1)"],
    "description": ""
  },
  "time.sleep": {
    "prefix": "time.sleep",
    "body": ["time.sleep($1)"],
    "description": "暂停执行调用线程达到给定的秒数。参数可以是浮点数，以指示更精确的睡眠时间。"
  },
  "timedelta": {
    "prefix": "timedelta",
    "body": ["timedelta($1)"],
    "description": ""
  },
  "datetime strptime": {
    "prefix": "datetime.strptime",
    "body": ["datetime.strptime(${1:text}, '%Y-%m-%d %H:%M:%S')"],
    "description": "字符串转换为日期"
  },
  "strptime Y-m-d": {
    "prefix": "strptime Y-m-d",
    "body": ["datetime.strptime(${1:text}, '%Y-%m-%d')"],
    "description": "字符串转换为日期"
  },
  "strptime H-M-S": {
    "prefix": "strptime H-M-S",
    "body": ["datetime.strptime(${1:text}, '%H:%M:%S')"],
    "description": "字符串转换为日期"
  },
  "calendar": {
    "prefix": "calendar",
    "body": ["calendar"],
    "description": "日历库"
  },
  "calendar.isleap": {
    "prefix": "calendar.isleap",
    "body": ["calendar.isleap(${1:year})"],
    "description": "判断是否闰年，闰年返回true"
  },
  "calendar.month": {
    "prefix": "calendar.month",
    "body": ["calendar.month($1)"],
    "description": ""
  },
  "requests": {
    "prefix": "requests",
    "body": ["requests"],
    "description": "requests 网络请求库"
  },
  "requests.get": {
    "prefix": "requests.get",
    "body": ["requests.get(${1:url})"],
    "description": "Request Get请求"
  },
  "requests.post": {
    "prefix": "requests.post",
    "body": ["requests.post(${1:url},data=${2:data})"],
    "description": "Request post请求"
  },
  "glob": {
    "prefix": "glob",
    "body": ["glob"],
    "description": "global 语句是作用于整个当前代码块的声明"
  },
  "except Exception": {
    "prefix": "Exception",
    "body": ["Exception"],
    "description": "异常 Exception"
  },
  "__main__": {
    "prefix": "__main__",
    "body": ["if __name__ == \"__main__\":", "\t${1:pass}"],
    "description": ""
  }
}
